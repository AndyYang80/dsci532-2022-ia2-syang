labs(fill= "Program type")
# schtyp_plot
# math_plot
# soc_plot
plot_grid(schtyp_plot, math_plot, soc_plot, nrow =1)
schtype_prop <- as.data.frame(xtabs(
~schtyp +
prog, hsb
) / rowSums(xtabs(
~schtyp +
prog, hsb
)),
responseName = "prop"
)
schtype_prop
schtyp_plot <- ggplot(schtype_prop, aes(x=schtyp, y=prop, fill=prog)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Proportion of public and private schools by school type") +
labs(x="School program type") +
labs(y="Proportion of schools") +
labs(fill= "Program type")
math_plot <- ggplot(hsb, aes(x=prog, y=math)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Math test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve math grades compared to vocational and general education programs") +
labs(fill= "Program type")
soc_plot <- ggplot(hsb, aes(x=prog, y=socst)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Social studies test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve social studies grades compared to vocational and general education programs")+
labs(fill= "Program type")
# schtyp_plot
# math_plot
# soc_plot
plot_grid(schtyp_plot, math_plot, soc_plot, nrow =1)
multinomial_fitting <- NULL
multinomial_fitting <- vglm(prog ~ schtyp + math + socst, family = multinomial, data = hsb)
multinomial_fitting
# Function tidy.vglm() for obtaining the model's summary.
tidy.vglm <- function(x, conf.int = FALSE, conf.level = 0.95) {
co <- as.data.frame(coef(summary(x)))
names(co) <- c("estimate", "std.error", "statistic", "p.value")
if (conf.int) {
qq <- qnorm((1 + conf.level) / 2)
co <- transform(co,
conf.low = estimate - qq * std.error,
conf.high = estimate + qq * std.error
)
}
co <- data.frame(term = rownames(co), co)
rownames(co) <- NULL
return(co)
}
model_summary <- tidy.vglm(multinomial_fitting)
model_summary
tibble(model_summary[c(3, 5, 7), 1:2], exp_estimate = round(exp(model_summary[c(3, 5, 7), 2]),2))
happiness_prop <- as.data.frame(xtabs(
~marital +
happiness, happiness
) / rowSums(xtabs(
~marital +
happiness, happiness
)),
responseName = "prop"
)
happiness_prop
schtyp_plot <- ggplot(happiness_prop, aes(x=marital, y=prop, fill=happiness)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Happiness by marital status") +
labs(x="Marital status") +
labs(y="Proportion") +
labs(fill= "Happiness level")
math_plot <- ggplot(happiness, aes(x=happiness, y=hours)) +
geom_boxplot(aes(fill=happiness)) +
labs(y="Hours worked") +
labs(x="Happiness level") +
ggtitle("Lower happiness observed among those working less hours") +
labs(fill= "Happiness level")
plot_grid(schtyp_plot, math_plot, nrow=1)
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
data(hsb)
hsb <- hsb %>%
select(prog, schtyp, math, socst)
head(hsb)
levels(hsb$prog)
schtype_prop <- as.data.frame(xtabs(
~schtyp +
prog, hsb
) / rowSums(xtabs(
~schtyp +
prog, hsb
)),
responseName = "prop"
)
schtype_prop
schtyp_plot <- ggplot(schtype_prop, aes(x=schtyp, y=prop, fill=prog)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Proportion of public and private schools by school type") +
labs(x="School program type") +
labs(y="Proportion of schools") +
labs(fill= "Program type")
math_plot <- ggplot(hsb, aes(x=prog, y=math)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Math test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve math grades compared to vocational and general education programs") +
labs(fill= "Program type")
soc_plot <- ggplot(hsb, aes(x=prog, y=socst)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Social studies test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve social studies grades compared to vocational and general education programs")+
labs(fill= "Program type")
# schtyp_plot
# math_plot
# soc_plot
plot_grid(schtyp_plot, math_plot, soc_plot, nrow =1)
multinomial_fitting <- NULL
multinomial_fitting <- vglm(prog ~ schtyp + math + socst, family = multinomial, data = hsb)
multinomial_fitting
. = ottr::check("tests/Q1.3.R")
# Function tidy.vglm() for obtaining the model's summary.
tidy.vglm <- function(x, conf.int = FALSE, conf.level = 0.95) {
co <- as.data.frame(coef(summary(x)))
names(co) <- c("estimate", "std.error", "statistic", "p.value")
if (conf.int) {
qq <- qnorm((1 + conf.level) / 2)
co <- transform(co,
conf.low = estimate - qq * std.error,
conf.high = estimate + qq * std.error
)
}
co <- data.frame(term = rownames(co), co)
rownames(co) <- NULL
return(co)
}
model_summary <- tidy.vglm(multinomial_fitting)
model_summary
tibble(model_summary[c(3, 5, 7), 1:2], exp_estimate = round(exp(model_summary[c(3, 5, 7), 2]),2))
happiness <- read_csv("data/happiness_survey.csv") %>%
dplyr::select(happiness, hours, marital)
head(happiness)
happiness$happiness <- as.ordered(happiness$happiness)
happiness$happiness <- fct_relevel(happiness$happiness,
c("Not too happy", "Pretty happy", "Very happy"))
levels(happiness$happiness)
happiness$marital <- as.factor(happiness$marital)
happiness$marital <- fct_relevel(
happiness$marital,
c("Never married", "Divorced", "Married", "Separated", "Widowed")
)
levels(happiness$marital)
happiness_prop <- as.data.frame(xtabs(
~marital +
happiness, happiness
) / rowSums(xtabs(
~marital +
happiness, happiness
)),
responseName = "prop"
)
happiness_prop
schtyp_plot <- ggplot(happiness_prop, aes(x=marital, y=prop, fill=happiness)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Happiness by marital status") +
labs(x="Marital status") +
labs(y="Proportion") +
labs(fill= "Happiness level")
math_plot <- ggplot(happiness, aes(x=happiness, y=hours)) +
geom_boxplot(aes(fill=happiness)) +
labs(y="Hours worked") +
labs(x="Happiness level") +
ggtitle("Lower happiness observed among those working less hours") +
labs(fill= "Happiness level")
plot_grid(schtyp_plot, math_plot, nrow=1)
ordinal_fitting <- NULL
ordinal_fitting <- polr(happiness ~ hours + marital, data = happiness, Hess = TRUE)
ordinal_fitting
. = ottr::check("tests/Q2.3.R")
. = ottr::check("tests/Q2.3.R")
OLS_fitting <- NULL
levels(happiness$happiness) <- 1:3
happiness$happiness <- as.numeric(happiness$happiness)
OLS_fitting <- lm(happiness ~ hours + marital, data = happiness)
OLS_fitting
. = ottr::check("tests/Q2.7.R")
tidy(OLS_fitting)
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
sleep_data$age <- as.factor(sleep_data$age)
levels(sleep_data$age)
sleep_data$method <- as.factor(sleep_data$method)
sleep_data$method <- fct_relevel(sleep_data$method,
c("control", "glasses"))
sleep_data$volunteer <- as.factor(sleep_data$volunteer)
sleep_data$age <- as.factor(sleep_data$age)
. = ottr::check("tests/Q3.1.R")
# plot_data <- sleep_data
# plot_data$method <- fct_relplot_data$method
# plot_data$method <- as.numeric(plot_data$method)
ggplot(sleep_data, aes(x=as.numeric(method), y=time_to_sleep, color=age)) +
geom_jitter(width=0.1) +
geom_smooth(method="lm", formula=y~x, fullrange=TRUE, se = FALSE) +
facet_wrap(~volunteer) +
ggtitle("Effect of method on sleep times") +
ylab("Time to sleep (mins)") +
xlab("Method (1 = control, 2 = glasses)")
# plot_data <- sleep_data
# plot_data$method <- fct_relplot_data$method
# plot_data$method <- as.numeric(plot_data$method)
ggplot(sleep_data, aes(x=as.numeric(method), y=time_to_sleep, color=age)) +
geom_jitter(width=0.1) +
geom_smooth(method="lm", formula=y~x, fullrange=TRUE, se = FALSE) +
facet_wrap(~volunteer) +
ggtitle("Effect of method on sleep times") +
ylab("Time to sleep (mins)") +
xlab("Method (1 = control, 2 = glasses)")
# plot_data <- sleep_data
# plot_data$method <- fct_relplot_data$method
# plot_data$method <- as.numeric(plot_data$method)
ggplot(sleep_data, aes(x=as.numeric(method), y=time_to_sleep, color=age)) +
geom_jitter(width=0.1) +
geom_smooth(method="lm", formula=y~x, fullrange=TRUE, se = FALSE) +
facet_wrap(~volunteer) +
ggtitle("Effect of method on sleep times") +
ylab("Time to sleep (mins)") +
xlab("Method (1 = control, 2 = glasses)")
OLS_fixed_model <- NULL
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q3.3.R")
OLS_fixed_model <- NULL
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q3.3.R")
tidy(OLS_fixed_model)
LME_model <- NULL
LME_model <- lmer(time_to_sleep ~ method + (method | volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q3.6.R")
LME_model <- NULL
LME_model <- lmer(time_to_sleep ~ method + (method | volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q3.6.R")
summary(LME_model)
# Uncomment the code below before proceeding.
confint(OLS_fixed_model)["methodglasses", ]
suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
pred_A_LME_model <- NULL
pred_new_LME_model <- NULL
pred_A_LME_model <- predict(LME_model, newdata = tibble(volunteer = "A", method = "glasses"))
pred_new_LME_model <- predict(LME_model, newdata = tibble(volunteer = "New", method = "glasses"), allow.new.levels = TRUE)
pred_A_LME_model
pred_new_LME_model
. = ottr::check("tests/Q3.12.R")
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
data(hsb)
hsb <- hsb %>%
select(prog, schtyp, math, socst)
head(hsb)
levels(hsb$prog)
schtype_prop <- as.data.frame(xtabs(
~schtyp +
prog, hsb
) / rowSums(xtabs(
~schtyp +
prog, hsb
)),
responseName = "prop"
)
schtype_prop
schtyp_plot <- ggplot(schtype_prop, aes(x=schtyp, y=prop, fill=prog)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Proportion of public and private schools by school type") +
labs(x="School program type") +
labs(y="Proportion of schools") +
labs(fill= "Program type")
math_plot <- ggplot(hsb, aes(x=prog, y=math)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Math test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve math grades compared to vocational and general education programs") +
labs(fill= "Program type")
soc_plot <- ggplot(hsb, aes(x=prog, y=socst)) +
geom_boxplot(aes(fill=prog)) +
labs(y="Social studies test scores") +
labs(x="School program type") +
ggtitle("Academic programs improve social studies grades compared to vocational and general education programs")+
labs(fill= "Program type")
# schtyp_plot
# math_plot
# soc_plot
plot_grid(schtyp_plot, math_plot, soc_plot, nrow =1)
multinomial_fitting <- NULL
multinomial_fitting <- vglm(prog ~ schtyp + math + socst, family = multinomial, data = hsb)
multinomial_fitting
. = ottr::check("tests/Q1.3.R")
# Function tidy.vglm() for obtaining the model's summary.
tidy.vglm <- function(x, conf.int = FALSE, conf.level = 0.95) {
co <- as.data.frame(coef(summary(x)))
names(co) <- c("estimate", "std.error", "statistic", "p.value")
if (conf.int) {
qq <- qnorm((1 + conf.level) / 2)
co <- transform(co,
conf.low = estimate - qq * std.error,
conf.high = estimate + qq * std.error
)
}
co <- data.frame(term = rownames(co), co)
rownames(co) <- NULL
return(co)
}
model_summary <- tidy.vglm(multinomial_fitting)
model_summary
tibble(model_summary[c(3, 5, 7), 1:2], exp_estimate = round(exp(model_summary[c(3, 5, 7), 2]),2))
happiness <- read_csv("data/happiness_survey.csv") %>%
dplyr::select(happiness, hours, marital)
head(happiness)
happiness$happiness <- as.ordered(happiness$happiness)
happiness$happiness <- fct_relevel(happiness$happiness,
c("Not too happy", "Pretty happy", "Very happy"))
levels(happiness$happiness)
happiness$marital <- as.factor(happiness$marital)
happiness$marital <- fct_relevel(
happiness$marital,
c("Never married", "Divorced", "Married", "Separated", "Widowed")
)
levels(happiness$marital)
happiness_prop <- as.data.frame(xtabs(
~marital +
happiness, happiness
) / rowSums(xtabs(
~marital +
happiness, happiness
)),
responseName = "prop"
)
happiness_prop
schtyp_plot <- ggplot(happiness_prop, aes(x=marital, y=prop, fill=happiness)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(sprintf("%.0f", prop*100),"%")),
position = position_stack(vjust = 0.5) ) +
ggtitle("Happiness by marital status") +
labs(x="Marital status") +
labs(y="Proportion") +
labs(fill= "Happiness level")
math_plot <- ggplot(happiness, aes(x=happiness, y=hours)) +
geom_boxplot(aes(fill=happiness)) +
labs(y="Hours worked") +
labs(x="Happiness level") +
ggtitle("Lower happiness observed among those working less hours") +
labs(fill= "Happiness level")
plot_grid(schtyp_plot, math_plot, nrow=1)
ordinal_fitting <- NULL
ordinal_fitting <- polr(happiness ~ hours + marital, data = happiness, Hess = TRUE)
ordinal_fitting
. = ottr::check("tests/Q2.3.R")
summary_ordinal_fitting <- cbind(tidy(ordinal_fitting),
p.value = pnorm(abs(tidy(ordinal_fitting)$statistic),
lower.tail = FALSE
) * 2
) |>
mutate_if(is.numeric, round, 2)
summary_ordinal_fitting
tibble(summary_ordinal_fitting[3, 1:2], exp.estimate = round(exp(summary_ordinal_fitting[3, 2]), 2))
OLS_fitting <- NULL
levels(happiness$happiness) <- 1:3
happiness$happiness <- as.numeric(happiness$happiness)
OLS_fitting <- lm(happiness ~ hours + marital, data = happiness)
OLS_fitting
. = ottr::check("tests/Q2.7.R")
tidy(OLS_fitting)
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
sleep_data$age <- as.factor(sleep_data$age)
levels(sleep_data$age)
sleep_data$method <- as.factor(sleep_data$method)
sleep_data$method <- fct_relevel(sleep_data$method,
c("control", "glasses"))
sleep_data$volunteer <- as.factor(sleep_data$volunteer)
sleep_data$age <- as.factor(sleep_data$age)
. = ottr::check("tests/Q3.1.R")
# plot_data <- sleep_data
# plot_data$method <- fct_relplot_data$method
# plot_data$method <- as.numeric(plot_data$method)
ggplot(sleep_data, aes(x=as.numeric(method), y=time_to_sleep, color=age)) +
geom_jitter(width=0.1) +
geom_smooth(method="lm", formula=y~x, fullrange=TRUE, se = FALSE) +
facet_wrap(~volunteer) +
ggtitle("Effect of method on sleep times") +
ylab("Time to sleep (mins)") +
xlab("Method (1 = control, 2 = glasses)")
OLS_fixed_model <- NULL
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q3.3.R")
tidy(OLS_fixed_model)
LME_model <- NULL
LME_model <- lmer(time_to_sleep ~ method + (method | volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q3.6.R")
summary(LME_model)
# Uncomment the code below before proceeding.
confint(OLS_fixed_model)["methodglasses", ]
suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
LME_model_2 <- NULL
LME_model_2 <- lmer(time_to_sleep ~ method + age*method + (method | volunteer), data = sleep_data)
LME_model_2
. = ottr::check("tests/Q3.8.R")
summary(LME_model_2)
GLME_model <- NULL
# YOUR CODE HERE
GLME_model
. = ottr::check("tests/Q3.10.R")
# YOUR CODE HERE
# YOUR CODE HERE
. = ottr::check("tests/Q3.12.R")
install.packages("rstan")
getwd()
here::here()
setwd("~/DSCI_532/dsci532-2022-ia2-syang/src")
setwd("~/DSCI_532/dsci532-2022-ia2-syang")
here::here()
library(ggplot2)
library(tidyverse)
library(readr)
olympic_data <- na.omit(readr::read_csv("../data/olympics_data.csv")))
olympic_data <- na.omit(readr::read_csv("../data/olympics_data.csv"))
olympic_data$medal <- factor(olympic_data$medal, levels=c("Gold", "Silver","Bronze"))
olympic_data
plot <- ggplot(olympic_data) +
geom_histogram(aes(x=age, fill=medal), bins=30) +
scale_fill_manual(values = c('#FFD700', '#C0C0C0', '#CD7F32'))
plot
values = c(1,2)
maxage <- int(values[1])
values = c(1,2)
maxage <- integer(values[1])
maxage
plot <- ggplot(olympic_data) +
geom_histogram(aes(x=age, fill=medal), bins=30) +
scale_fill_manual(values = c('#FFD700', '#C0C0C0', '#CD7F32')) +
xlab("Age range") +
ylab("medals earned")
plot
library(ggplot2)
library(dplyr)
library(readr)
olympic_data <- na.omit(readr::read_csv("../data/olympics_data.csv"))
olympic_data$medal <- factor(olympic_data$medal, levels=c("Gold", "Silver","Bronze"))
olympic_data
values = c(1,2)
maxage <- integer(values[1])
maxage
plot <- ggplot(olympic_data) +
geom_histogram(aes(x=age, fill=medal), bins=30) +
scale_fill_manual(values = c('#FFD700', '#C0C0C0', '#CD7F32')) +
xlab("Age range") +
ylab("medals earned")
plot
library(dash)
app$callback(
list(output('height_hist', 'figure')),
list(input('age_slider', 'value')),
function(year_range) {
minage = integer(year_range[1])
maxage = integer(year_range[2])
plot_data <- filter(olympic_data, between(age, minage, maxage))
plot <- ggplot(plot_data) +
geom_histogram(aes(x=age, fill=medal), bins=30) +
scale_fill_manual(values = c('#FFD700', '#C0C0C0', '#CD7F32')) +
xlab("Age range") +
ylab("medals earned")
}
)
Rscript app.py
